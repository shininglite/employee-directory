{"version":3,"sources":["utils/API.js","components/EmployeeDetail.js","components/Container.js","components/SearchForm.js","components/EmployeeContainer.js","App.js","serviceWorker.js","index.js"],"names":["query","axios","get","EmployeeDetail","props","className","alt","title","src","style","margin","first","last","Container","fluid","children","SearchForm","htmlFor","onChange","handleInputChange","value","name","type","placeholder","id","onClick","handleFormSubmit","EmployeeContainer","state","result","search","searchEmployees","API","then","res","setState","data","catch","err","console","log","event","target","preventDefault","this","size","heading","First","Last","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qSAKe,EACL,SAASA,GACf,OAAOC,IAAMC,IALD,+CAKeF,ICQhBG,MAbf,SAAwBC,GACtB,OACE,yBAAKC,UAAU,eACb,yBAAKC,IAAKF,EAAMG,MAAOF,UAAU,YAAYG,IAAKJ,EAAMI,IAAKC,MAAO,CAAEC,OAAQ,YAC9E,2CAAiBN,EAAMO,OACvB,0CAAgBP,EAAMQ,QCDbC,MAJf,SAAmBT,GACjB,OAAO,yBAAKC,UAAS,mBAAcD,EAAMU,MAAQ,SAAW,KAAOV,EAAMW,WCsB5DC,MAvBf,SAAoBZ,GAClB,OACE,8BACE,yBAAKC,UAAU,cACb,2BAAOY,QAAQ,UAAf,WACA,2BACEC,SAAUd,EAAMe,kBAChBC,MAAOhB,EAAMgB,MACbC,KAAK,SACLC,KAAK,OACLjB,UAAU,eACVkB,YAAY,yBACZC,GAAG,WAEL,6BACA,4BAAQC,QAASrB,EAAMsB,iBAAkBrB,UAAU,mBAAnD,aC2DOsB,E,4MAlEbC,MAAQ,CACNC,OAAQ,GACRC,OAAQ,W,EAQZC,gBAAkB,SAAA/B,GAChBgC,EAAWhC,GACRiC,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEN,OAAQK,EAAIE,UACxCC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,EAG9BnB,kBAAoB,SAAAsB,GAClB,IAAMrB,EAAQqB,EAAMC,OAAOtB,MACrBT,EAAQ8B,EAAMC,OAAO/B,MAC3B,EAAKwB,SAAL,eACGxB,EAAQS,K,EAKbM,iBAAmB,SAAAe,GACjBA,EAAME,iBACN,EAAKZ,gBAAgB,EAAKH,MAAME,S,kEApBhCc,KAAKb,gBAAgB,M,+BAwBrB,OACE,kBAAC,EAAD,KACE,6BACE,yBAAKc,KAAK,QACR,yBACEC,QAASF,KAAKhB,MAAMC,OAAOkB,OAAS,mCAEnCH,KAAKhB,MAAMC,OAAOkB,MACjB,kBAAC,EAAD,CACEpC,MAAOiC,KAAKhB,MAAMC,OAAOkB,MACzBnC,KAAMgC,KAAKhB,MAAMC,OAAOmB,OAO1B,uDAIN,yBAAKH,KAAK,QACR,yBAAKC,QAAQ,UACT,kBAAC,EAAD,CACE1B,MAAOwB,KAAKhB,MAAME,OAClBX,kBAAmByB,KAAKzB,kBACxBO,iBAAkBkB,KAAKlB,2B,GA1DPuB,aCWjBC,MAJf,WACE,OAAO,kBAAC,EAAD,OCLWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd5B,OAAM,SAAA6B,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.4f1c9554.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst BASEURL = \"https://randomuser.me/api/?results=20&nat=US\"\n\n// Export an object with a \"search\" method that searches the RandomUser API for the passed query\nexport default {\n  search: function(query) {\n    return axios.get(BASEURL + query);\n  }\n};\n","import React from \"react\";\n\nfunction EmployeeDetail(props) {\n  return (\n    <div className=\"text-center\">\n      <img alt={props.title} className=\"img-fluid\" src={props.src} style={{ margin: \"0 auto\" }} />\n      <h3>First Name: {props.first}</h3>\n      <h3>Last Name: {props.last}</h3>\n      {/* <h3>Director(s): {props.director}</h3>\n      <h3>Genre: {props.genre}</h3>\n      <h3>Released: {props.released}</h3> */}\n    </div>\n  );\n}\n\nexport default EmployeeDetail;","import React from \"react\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>;\n}\n\nexport default Container;\n","import React from \"react\";\n\nfunction SearchForm(props) {\n  return (\n    <form>\n      <div className=\"form-group\">\n        <label htmlFor=\"search\">Search:</label>\n        <input\n          onChange={props.handleInputChange}\n          value={props.value}\n          name=\"search\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Search For an Employee\"\n          id=\"search\"\n        />\n        <br />\n        <button onClick={props.handleFormSubmit} className=\"btn btn-primary\">\n          Search\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default SearchForm;","import React, { Component } from \"react\";\n// import Header from './Header';\n// import Search from './Search';\n// import Table from './Table';\nimport API from \"../utils/API\";\nimport EmployeeDetail from \"./EmployeeDetail\";\nimport Container from \"./Container\";\nimport SearchForm from \"./SearchForm\";\n\nclass EmployeeContainer extends Component {\n  state = {\n    result: {},\n    search: \"Brennan\"\n  };\n\n// When this component mounts, search field is empty\ncomponentDidMount() {\n  this.searchEmployees(\"\");\n}\n\nsearchEmployees = query => {\n  API.search(query)\n    .then(res => this.setState({ result: res.data }))\n    .catch(err => console.log(err));\n};\n\nhandleInputChange = event => {\n  const value = event.target.value;\n  const first = event.target.first;\n  this.setState({\n    [first]: value\n  });\n};\n\n// When the form is submitted, search the API for the value of `this.state.search`\nhandleFormSubmit = event => {\n  event.preventDefault();\n  this.searchEmployees(this.state.search);\n};\n\nrender() {\n  return (\n    <Container>\n      <div>\n        <div size=\"md-8\">\n          <div\n            heading={this.state.result.First || \"Search for an Employee to Begin\"}\n          >\n            {this.state.result.First ? (\n              <EmployeeDetail\n                first={this.state.result.First}\n                last={this.state.result.Last}\n                // src={this.state.result.Poster}\n                // director={this.state.result.Director}\n                // genre={this.state.result.Genre}\n                // released={this.state.result.Released}\n              />\n            ) : (\n              <h3>No Results to Display</h3>\n            )}\n          </div>\n        </div>\n        <div size=\"md-4\">\n          <div heading=\"Search\">\n              <SearchForm\n                value={this.state.search}\n                handleInputChange={this.handleInputChange}\n                handleFormSubmit={this.handleFormSubmit}\n              />\n          </div>\n        </div>\n      </div>\n    </Container>\n  );\n}\n}\nexport default EmployeeContainer;\n","// import React from 'react';\n// //import logo from './logo.svg';\n// import './App.css';\n// import './components/EmployeeContainer';\n\n// function App() {\n//   return (\n//     <div>\n//       return <EmployeeContainer />;\n//     </div>\n//   );\n// }\n\nimport React from \"react\";\nimport EmployeeContainer from \"./components/EmployeeContainer\";\n\nfunction App() {\n  return <EmployeeContainer />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}